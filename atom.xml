<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lee&#39;s Blog|学无止境</title>
  
  <subtitle>李国庆的个人技术小站</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-11-03T15:28:50.963Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>lee同学</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java冒泡排序</title>
    <link href="http://yoursite.com/2017/11/03/Java%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
    <id>http://yoursite.com/2017/11/03/Java冒泡排序/</id>
    <published>2017-11-03T14:22:01.000Z</published>
    <updated>2017-11-03T15:28:50.963Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>冒泡排序（Bubble Sort）是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。</p></blockquote><a id="more"></a><p><strong>冒泡排序算法的运作如下:</strong></p><blockquote><ol><li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li><li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。</li><li>在这一点，最后的元素应该会是最大的数。</li><li>针对所有的元素重复以上的步骤，除了最后一个。</li><li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li></ol></blockquote><p><strong>冒泡排序的过程图：</strong></p><p><img src="http://upload.wikimedia.org/wikipedia/commons/3/37/Bubble_sort_animation.gif?_=2423861" alt=""></p><p><strong>代码：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BubbleSort</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> score[] = &#123;<span class="number">67</span>, <span class="number">69</span>, <span class="number">75</span>, <span class="number">87</span>, <span class="number">89</span>, <span class="number">90</span>, <span class="number">99</span>, <span class="number">100</span>&#125;;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; score.length -<span class="number">1</span>; i++)&#123;    <span class="comment">//最多做n-1趟排序</span></div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ;j &lt; score.length - i - <span class="number">1</span>; j++)&#123;    <span class="comment">//对当前无序区间score[0......length-i-1]进行排序(j的范围很关键，这个范围是在逐步缩小的)</span></div><div class="line">                <span class="keyword">if</span>(score[j] &lt; score[j + <span class="number">1</span>])&#123;    <span class="comment">//把小的值交换到后面</span></div><div class="line">                    <span class="keyword">int</span> temp = score[j];</div><div class="line">                    score[j] = score[j + <span class="number">1</span>];</div><div class="line">                    score[j + <span class="number">1</span>] = temp;</div><div class="line">                &#125;</div><div class="line">            &#125;            </div><div class="line">            System.out.print(<span class="string">"第"</span> + (i + <span class="number">1</span>) + <span class="string">"次排序结果："</span>);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> a = <span class="number">0</span>; a &lt; score.length; a++)&#123;</div><div class="line">                System.out.print(score[a] + <span class="string">"\t"</span>);</div><div class="line">            &#125;</div><div class="line">            System.out.println(<span class="string">""</span>);</div><div class="line">        &#125;</div><div class="line">            System.out.print(<span class="string">"最终排序结果："</span>);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> a = <span class="number">0</span>; a &lt; score.length; a++)&#123;</div><div class="line">                System.out.print(score[a] + <span class="string">"\t"</span>);</div><div class="line">       &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;冒泡排序（Bubble Sort）是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java Web实验一</title>
    <link href="http://yoursite.com/2017/11/03/Java%20Web%E5%AE%9E%E9%AA%8C%E4%B8%80/"/>
    <id>http://yoursite.com/2017/11/03/Java Web实验一/</id>
    <published>2017-11-02T16:56:21.000Z</published>
    <updated>2017-11-03T14:11:44.566Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>世上本没有路，走的人多了，便成了路。</p><footer><strong>文学家</strong><cite>鲁迅</cite></footer></blockquote><h2 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h2><hr><ul><li><strong>1.建立名为login.html页面，并在web.xml中将login.html配置为欢迎页面。其运行结果如下图所示。点击“登陆”按钮之后，请求LoginServlet对其处理。</strong><a id="more"></a></li><li><img src="http://oyubk4uik.bkt.clouddn.com/17-11-3/57622553.jpg" alt=""></li><li><strong>2.编写名为LoginServlet的Servlet，取得表单传递的参数（账号和密码）。若账号和密码为“北信”和“admin”则为验证成功，将账号存入request对象中，并将请求转发给WelcomeServlet。若账号和密码验证失败，则响应给客户端如下图所示信息</strong><ul><li>（1）请求参数的信息；（2）客户端的信息；（3）设置Refresh响应头，10秒钟后跳转到login.html）。</li></ul></li><li><img src="http://oyubk4uik.bkt.clouddn.com/17-11-3/10913318.jpg" alt=""></li><li><strong>3.编写WelcomeServlet，取出request对象中的账号，并响应给客户端如下图所示信息。点击资源名称超链接之后，将请求发送到DownloadServlet，完成资源的下载。</strong></li><li><img src="http://oyubk4uik.bkt.clouddn.com/17-11-3/47937343.jpg" alt=""></li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><hr><p><strong>1. LoginServlet</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">LoginServlet</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">super</span>();</div><div class="line">       <span class="comment">// TODO Auto-generated constructor stub</span></div><div class="line">   &#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@see</span> HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line">String username = request.getParameter(<span class="string">"username"</span>);</div><div class="line">String password = request.getParameter(<span class="string">"password"</span>);</div><div class="line"><span class="keyword">if</span>(username.equals(<span class="string">"admin"</span>)&amp;&amp;password.equals(<span class="string">"admin"</span>))&#123;</div><div class="line">request.setAttribute(<span class="string">"username"</span>, username);</div><div class="line">RequestDispatcher rd=</div><div class="line">request.getRequestDispatcher(<span class="string">"WelcomeServlet"</span>);</div><div class="line">rd.forward(request, response);</div><div class="line">&#125;<span class="keyword">else</span> &#123; </div><div class="line">response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</div><div class="line">PrintWriter out = response.getWriter();</div><div class="line">out.println(<span class="string">"&lt;html&gt;"</span>);</div><div class="line">out.println(<span class="string">"&lt;head&gt;&lt;title&gt;错误信息&lt;/title&gt;&lt;/head&gt;"</span>);</div><div class="line">out.println(<span class="string">"&lt;body&gt;"</span>);</div><div class="line">out.println(<span class="string">"&lt;h3&gt;错误提示:&lt;/h3&gt;"</span>);</div><div class="line">out.println(<span class="string">"账号:"</span>+username);</div><div class="line">out.println(<span class="string">"&lt;br&gt;"</span>);</div><div class="line">out.println(<span class="string">"密码:"</span>+password);</div><div class="line">out.println(<span class="string">"&lt;br/&gt;&lt;br/&gt;"</span>);</div><div class="line">out.println(<span class="string">"&lt;hr width=99% &gt;"</span>);</div><div class="line">out.println(<span class="string">"&lt;table border='0'&gt;"</span>);</div><div class="line">out.println(<span class="string">"&lt;tr&gt;&lt;td&gt;客户主机名:&lt;/td&gt;"</span>);</div><div class="line">out.println(<span class="string">"&lt;td&gt;"</span>+request.getRemoteHost()+<span class="string">"&lt;/td&gt;&lt;/tr&gt;"</span>);</div><div class="line">out.println(<span class="string">"&lt;tr&gt;&lt;td&gt;客户IP地址:&lt;/td&gt;"</span>);</div><div class="line">out.println(<span class="string">"&lt;td&gt;"</span>+request.getRemoteAddr()+<span class="string">"&lt;/td&gt;&lt;/tr&gt;"</span>);</div><div class="line">out.println(<span class="string">"&lt;tr&gt;&lt;td&gt;端口:&lt;/td&gt;"</span>);</div><div class="line">out.println(<span class="string">"&lt;td&gt;"</span>+request.getRemotePort()+<span class="string">"&lt;/td&gt;&lt;/tr&gt;"</span>);</div><div class="line">out.println(<span class="string">"&lt;tr&gt;&lt;td&gt;请求方法:&lt;/td&gt;"</span>);</div><div class="line">out.println(<span class="string">"&lt;td&gt;"</span>+request.getMethod()+<span class="string">"&lt;/td&gt;&lt;/tr&gt;"</span>);</div><div class="line">out.println(<span class="string">"&lt;/table&gt;"</span>);</div><div class="line">out.println(<span class="string">"&lt;br/&gt;&lt;br/&gt;"</span>);</div><div class="line">out.println(<span class="string">"&lt;hr width=99% &gt;"</span>);</div><div class="line">out.println(<span class="string">"&lt;p&gt;你的登陆信息有误&lt;br/&gt;十秒钟后将自动跳转到登陆界面&lt;p&gt;"</span>);</div><div class="line">out.println(<span class="string">"&lt;/body&gt;&lt;/html&gt;"</span>);</div><div class="line">response.setHeader(<span class="string">"Refresh"</span>, <span class="string">"10;URL=http://localhost:8080/test/Login.html"</span>);</div><div class="line">&#125;</div><div class="line">&#125;<span class="string">'</span></div></pre></td></tr></table></figure><br><strong>2.WelcomeServlet</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line"><span class="comment">// TODO Auto-generated method stub</span></div><div class="line">response.getWriter().append(<span class="string">"Served at: "</span>).append(request.getContextPath());</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@see</span> HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line">request.getAttribute(<span class="string">"username"</span>);</div><div class="line"></div><div class="line">response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</div><div class="line">PrintWriter out = response.getWriter();</div><div class="line">out.println(<span class="string">"&lt;html&gt;&lt;body&gt;"</span>);</div><div class="line">out.println(<span class="string">"&lt;head&gt;&lt;title&gt;成功登陆&lt;/title&gt;&lt;/head&gt;"</span>);</div><div class="line">out.println(<span class="string">"你好,你已成功登陆！&lt;br&gt;欢迎选择资源下载:"</span>);</div><div class="line">out.println(<span class="string">"&lt;br&gt;&lt;br&gt;"</span>);</div><div class="line">out.println(<span class="string">"&lt;a href=DownloadServlet&gt;《hello world!》&lt;/a&gt;"</span>);</div><div class="line">out.println(<span class="string">"&lt;/body&gt;&lt;/html&gt;"</span>);</div><div class="line">doGet(request, response);</div><div class="line">&#125;</div></pre></td></tr></table></figure><br><strong>3.DownloadServlet</strong>//基本功能实现，有待完善。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line"><span class="comment">//设置文件的内容类型</span></div><div class="line">response.setContentType(<span class="string">"application/msword;charset=gb2312"</span>);</div><div class="line"><span class="comment">//设置Content-Disposition响应头，指定文件名</span></div><div class="line">response.setHeader(<span class="string">"Content-Disposition"</span>, </div><div class="line"><span class="string">"attachment;filename=helloworld!"</span>);</div><div class="line"><span class="comment">//获得输入流对象</span></div><div class="line">OutputStream os = response.getOutputStream();</div><div class="line">ServletContext context = getServletContext();</div><div class="line"><span class="comment">//返回输入流对象</span></div><div class="line">InputStream is = context.getResourceAsStream(<span class="string">"/hello.html"</span>);</div><div class="line"><span class="keyword">byte</span>[] bytearray=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line"><span class="keyword">int</span> bytesread=<span class="number">0</span>;</div><div class="line"><span class="keyword">while</span>((bytesread = is.read(bytearray))!=-<span class="number">1</span>)&#123;</div><div class="line"><span class="comment">//将数据发送到客户端</span></div><div class="line">os.write(bytearray, <span class="number">0</span>, bytesread);</div><div class="line">&#125;</div><div class="line">os.flush();</div><div class="line">is.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="实验总结"><a href="#实验总结" class="headerlink" title="实验总结"></a>实验总结</h1><ul><li>本次实验时间仓促，只是实现了基本功能，还有些逻辑问题没有进一步优化，有待完善。</li><li>完成周期过长，基本都是书上的例题，问题不断，不能运行啊，无法正常跳转到下个界面等等。。</li><li>还有些问题没有解决，有待优化。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;世上本没有路，走的人多了，便成了路。&lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;文学家&lt;/strong&gt;&lt;cite&gt;鲁迅&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;
&lt;h2 id=&quot;实验内容&quot;&gt;&lt;a href=&quot;#实验内容&quot; class=&quot;headerlink&quot; title=&quot;实验内容&quot;&gt;&lt;/a&gt;实验内容&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;1.建立名为login.html页面，并在web.xml中将login.html配置为欢迎页面。其运行结果如下图所示。点击“登陆”按钮之后，请求LoginServlet对其处理。&lt;/strong&gt;
    
    </summary>
    
      <category term="Java Web" scheme="http://yoursite.com/categories/Java-Web/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>沉默的大多数</title>
    <link href="http://yoursite.com/2017/11/02/%E6%B2%89%E9%BB%98%E7%9A%84%E5%A4%A7%E5%A4%9A%E6%95%B0/"/>
    <id>http://yoursite.com/2017/11/02/沉默的大多数/</id>
    <published>2017-11-02T15:49:16.000Z</published>
    <updated>2017-11-03T09:32:29.485Z</updated>
    
    <content type="html"><![CDATA[<!-- 标签 方式，要求版本在0.4.5或以上 --><blockquote class="blockquote-center"><p>人的一切痛苦，本质上都是对自己的无能的愤怒。<br>—王小波</p></blockquote><p>　　1. 我选择沉默的主要原因之一：从话语中，你很少能学到人性，从沉默中却能。假如还想学得更多，那就要继续一声不吭 。</p><p>　　2. “在一个喧嚣的话语圈下面，始终有一个沉默的大多数。既然精神原子弹在一颗又一颗地炸着，哪里有我们说话的份?但我辈现在开始说话，以前说过的一切和我们都无关系–总而言之，是个一刀两断的意思。千里之行，始于足下，中国要有自由派，就从我辈开始。”<br><a id="more"></a></p><p>　　3. 别人的痛苦才是艺术的源泉。而你去受苦，只会成为别人的艺术源泉。</p><p>　　4. 质朴的人们假如能把自己理解不了的事情看做是与己无关的事，那就好了。</p><p>　　5. 因为没事干而下棋，性质和x差不x太多。</p><p>　　6. 胡思乱想并不有趣，有趣的是有道理而新奇。</p><p>　　7. 在思想真空里煎熬。<br>　　8. 真理直率无比，坚硬无比，但凡有一点柔顺，也算不了真理。</p><p>　　9. 假如我被大奸大恶之徒所骗，心理还能平衡，而被善良的低智人所骗，我就不能原谅自己。</p><p>　　10. 现在有很多文人下了海，不再从事文化事业。不管在商界、产业界还是科技界，人们以聪明才智、辛勤劳动来进行竞争。唯独在文化界，赌的是人品、爱国心、羞耻心。照我看来，这有点像赌命，甚至比赌命还严重。这种危险的游戏有何奖品?只是一点小小的文名。所以，你不要怪文人下海。</p><p>　　11. 一般来说，扼杀有趣的人总是这么说的：为了营造至善，我们必须做出这种牺牲，但却忘记了让人们活着得到乐趣，这本身就是善;因为这点小小的疏忽，至善就变成了至恶······</p><p>　　12. 周围的世界太过荒诞，所以暗下决心保持沉默。</p><p>　　13. 罗素先生曾说，真正的伦理原则是把人人同等看待。我以为这个原则是说，当语及他人时，首先该把他当个寻常人，然后再讨论他的善恶是非。这不是尊重他，而是尊重“那人”，从最深的意义上说，更是尊重自己——所有的人毕竟属同一物种。人的成就、过失、美德和陋习，都不该用他的特殊来解释。You are special，这句话只适合于对爱人讲。假如不是这么用，也很肉麻。</p><p>　　14. 在我们这里，人对人的态度，有时太过粗暴、太不讲道理。按现代的标准来看，这种态度过于原始——这可能是传统社会的痕迹。假如真是这样，我们或许可以期望将来情况会好些。</p><p>　　15. 照我看，不管干什么都可以保持沉默。</p><p>　　16. 假如一个人每天吃一样的饭，干一样的活，再加上把八个样板戏翻过来倒过去的看，看到听了上句知道下句的程度，就值得我最大的同情。</p><p>　　17. 我相信这不是我一个人的经历：傍晚时分，你坐在屋檐下，看着天慢慢地黑下去，心里寂寞而凄凉，感到自己的生命被剥夺了。当时我是个年轻人，但我害怕这样生活下去，衰老下去。在我看来，这是比死亡更可怕的事。</p><p>　　18. 在我周围，像我这种性格的人特多——在公众场合什么都不说，到了私下里却妙语连珠，换言之，对信得过的人什么都说，对信不过的人什么都不说。保持沉默是怯懦的。</p><p>　　19. 一个人想像自己不懂得的事很容易浪漫</p><p>　　20. 我所说的一切全都过去了。似乎没有必要保持沉默了</p><p>　　21. 口沫飞溅，对别人大做价值评判，层次很低。</p><p>　　22. 不管是同性恋，还是异性恋，对爱情的忠贞不渝总是让人敬重。</p><p>　　23. 只有那些知道自己智慧一文不值的人，才是最有智慧的人。</p><p>　　24. 人家有几样好东西，活的好一点，心情也好一点，这就是轻狂。非得把这些好东西毁了，让人家沉痛，这就是不轻狂。</p><p>　　25. 我常听人说：这世界上哪有那么多有趣的事情。人对现实世界有这种评价、这种感慨，恐怕不能说是错误的。问题就在于应该做点什么。这句感慨是个四通八达的路口，所有的人都到达过这个地方，然后在此分手。有些人去开创有趣的事业，有些人去开创无趣的事业。前者以为，既然有趣的事不多，我们才要做有趣的事。后者经过这一番感慨，就自以为知道了天命，然后板起脸来对别人进行说教。</p><p>　　26. 从话语中，你很少能学到人性，从沉默中却能。假如还想学得更多，那就要继续一声不吭。</p><p>　　27. 在我周围，像我这种性格的人特多──在公众场合什么都不说，到了私下里则妙语连珠，换言之，对信得过的人什么都说，对信不过的人什么都不说。起初我以为这是因为经历了严酷的时期，后来才发现，这是中国人的通病。</p><p>　　28. 是我要做不是我必须做——这是一种本质的区别。我个人认为，做的事才是“有”，做自己也不知为什么要做的事则是“无”。</p><p>　　29. 人活在世界上，不可以有偏差;而且多少要费点劲儿，才能把自己保持到理性的轨道上。</p><p>　　30. 说这辈子我干什么都可以，就是不能做一个一无所能，就能明辨是非的人。</p>]]></content>
    
    <summary type="html">
    
      &lt;!-- 标签 方式，要求版本在0.4.5或以上 --&gt;
&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;人的一切痛苦，本质上都是对自己的无能的愤怒。&lt;br&gt;—王小波&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;　　1. 我选择沉默的主要原因之一：从话语中，你很少能学到人性，从沉默中却能。假如还想学得更多，那就要继续一声不吭 。&lt;/p&gt;
&lt;p&gt;　　2. “在一个喧嚣的话语圈下面，始终有一个沉默的大多数。既然精神原子弹在一颗又一颗地炸着，哪里有我们说话的份?但我辈现在开始说话，以前说过的一切和我们都无关系–总而言之，是个一刀两断的意思。千里之行，始于足下，中国要有自由派，就从我辈开始。”&lt;br&gt;
    
    </summary>
    
      <category term="读书随笔" scheme="http://yoursite.com/categories/%E8%AF%BB%E4%B9%A6%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="王小波" scheme="http://yoursite.com/tags/%E7%8E%8B%E5%B0%8F%E6%B3%A2/"/>
    
      <category term="语录" scheme="http://yoursite.com/tags/%E8%AF%AD%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/10/31/hello-world/"/>
    <id>http://yoursite.com/2017/10/31/hello-world/</id>
    <published>2017-10-31T11:08:05.874Z</published>
    <updated>2017-11-03T09:38:16.491Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to Lee’s Blog<br><a id="more"></a><br>欢迎来到我的个人小站，本站主要记录学习笔记，生活随笔，电影推荐等等。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">printf(&quot;Hello World!&quot;);</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to Lee’s Blog&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
